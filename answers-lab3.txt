# Lab 3
## What is the purpose of having an individual handler function for each exception/interrupt?
Using individual handler functions for each exception or interrupt is important for effective error handling. Each type of exception or interrupt typically signifies a different kind of issue, requiring a different response. For example, a memory access violation needs a different approach than a division by zero error. Individual handlers allow for targeted responses, making the code clearer, easier to maintain, and more robust. They also ensure better resource management by allowing tailored handling of specific issues. A single generic handler would be less effective, potentially leading to complex, less reliable, and harder-to-maintain code.

## Did you have to do anything to make the user/softint program behave correctly?
No, there was no need to make any changes to the softint program for it to behave correctly. The program is designed to generate a general protection fault (interrupt vector 13), although it contains a call for int $14 (a page fault interrupt). This discrepancy is due to security measures that prevent user programs from directly invoking certain interrupts. If the kernel permitted softint to trigger the page fault handler directly, it could lead to security vulnerabilities, as users could exploit this to execute malicious code with kernel privileges. Thus, the system interprets the int $14 call as a privilege violation and triggers a general protection fault instead.
